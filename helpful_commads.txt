# before atoms
(name-replace "sigma1_alg" "(: (V(s_alg), ext(reverse(p(s_alg)))(t_alg) ) :)" )
(name-replace "new_sigma_alg" "append(sigma1_alg, sigma)")
(name-replace "Delta1_alg" "fresh_subs?(sigma1_alg, Delta)`1")
(name-replace "bool1_alg" "fresh_subs?(sigma1_alg, Delta)`2")
(name-replace "unif_prb_lst1_alg" "apply_sub_prb_lst(sigma1_alg, cdr(x!1))")
(name-replace "unif_prb_lst2_alg" "apply_sub_prb_lst(sigma1_alg, fix_pnt2unif_prb(x!2))")
(name-replace "new_Delta_alg" "append(Delta1_alg, Delta)")
(name-replace "new_unif_prb_lst_alg" "append(unif_prb_lst1_alg, unif_prb_lst2_alg)")
(inst -1 "new_Delta_alg" "Nabla" "prtc_vars" "new_sigma_alg" "sigma1" "Delta_sol" "sigma_sol" "fix_pnt_eq_lst_sol")

## atoms
(name-replace "t_alg" "car(x!1)`1")
(name-replace "s_alg" "car(x!1)`2")
# the first instantiation is with the new unif_prb_lst and the new_fix_pnt_equation
(inst -1 "Delta" "Nabla" "sigma" "sigma1" "Delta_sol" "sigma_sol" "fix_pnt_eq_lst_sol")


## susp var
(name-replace "sigma1_alg" "(: (V(t_alg), ext(reverse(p(t_alg)))(s_alg) ) :)" )
(name-replace "new_sigma_alg" "append(sigma1_alg, sigma)")
(name-replace "Delta1_alg" "fresh_subs?(sigma1_alg, Delta)`1")
(name-replace "bool1_alg" "fresh_subs?(sigma1_alg, Delta)`2")
(name-replace "unif_prb_lst1_alg" "apply_sub_prb_lst(sigma1_alg, cdr(x!1))")
(name-replace "unif_prb_lst2_alg" "apply_sub_prb_lst(sigma1_alg, fix_pnt2unif_prb(x!2))")
(name-replace "new_Delta_alg" "append(Delta1_alg, Delta)")
(name-replace "new_unif_prb_lst_alg" "append(unif_prb_lst1_alg, unif_prb_lst2_alg)")


##################################
# completeness
# before atoms
(inst -1 "new_unif_prb_lst_alg" "(::)")
(inst -1 "new_Delta_alg" "Nabla" "prtc_vars" "new_sigma_alg" "sigma1")
obs: assim que você nomear as coisas, já compensa provar que more_gen_sub?(Nabla)(sigma1_alg, sigma1) :)

# atoms
(inst -1 "Delta" "Nabla" "prtc_vars" "sigma" "sigma1")

# suspended variable depois do atomo
-> mesma coisa com soudness

-> fixpoint
(name-replace "new_fix_pnt_eq_alg" "(:(append(reverse(p(s_alg)), p(t_alg)), V(t_alg)):)")
(name-replace "new_fix_pnt_eq_lst_alg"  "append(new_fix_pnt_eq_alg, x!2)")
(inst -1 "cdr(x!1)" "new_fix_pnt_eq_lst_alg")

# pair
(name-replace "unif_prb1_alg" "(:(term1(t_alg), term1(s_alg)):)")
(name-replace "unif_prb2_alg" "(:(term2(t_alg), term2(s_alg)):)")
(name-replace "new_unif_prb_lst_alg" "append(append(unif_prb1_alg, unif_prb2_alg), cdr(x!1))")

# abs
(name-replace "new_unif_prb_alg" "(:(body(t_alg), body(s_alg)):)")
(name-replace "new_unif_prb_lst_alg" "append(new_unif_prb_alg, cdr(x!1))")

(name-replace "Delta1_alg" "fresh?(abstr(t_alg), body(s_alg))`1")
(name-replace "bool1_alg" "fresh?(abstr(t_alg), body(s_alg))`2")
(name-replace "new_Delta_alg" "append(Delta1_alg, Delta)" )
(name-replace "new_unif_prb_alg"  "(: (body(t_alg), ext((: (abstr(t_alg), abstr(s_alg)) :))(body(s_alg))) :)")
(name-replace "new_unif_prb_lst_alg"  "append(new_unif_prb_alg, cdr(x!1))")

# app
(name-replace "new_unif_prb_alg" "(:(arg(t_alg), arg(s_alg)):)")
(name-replace "new_unif_prb_lst_alg" "append(new_unif_prb_alg, cdr(x!1))") 

# capp
(name-replace "unif_prb1_1_alg" "(:(term1(c_arg(t_alg)), term1(c_arg(s_alg))):)")
(name-replace "unif_prb2_2_alg" "(:(term2(c_arg(t_alg)), term2(c_arg(s_alg))):)")
(name-replace "unif_prb_lst1_alg" "append(append(unif_prb1_1_alg, unif_prb2_2_alg), cdr(x!1))")


(name-replace "unif_prb1_2_alg" "(:(term1(c_arg(t_alg)), term2(c_arg(s_alg))):)")
(name-replace "unif_prb2_1_alg" "(:(term2(c_arg(t_alg)), term1(c_arg(s_alg))):)")
(name-replace "unif_prb_lst1_alg" "append(append(unif_prb1_1_alg, unif_prb2_2_alg), cdr(x!1))")


